# Функция для проверки, является ли число простым
def is_prime(n):
    # Отрицательные числа, 0 и 1 не являются простыми
    if n <= 1:
        return False

    # Числа 2 и 3 — простые
    if n <= 3:
        return True

    # Если число делится на 2 или 3, оно не простое
    if n % 2 == 0 or n % 3 == 0:
        return False

    # Проверка делителей вида 6k ± 1 до корня из n
    i = 5
    while i * i <= n:
        # Если n делится на i или i+2, оно не простое
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True


# Функция для поиска ближайшего простого числа к данному
def nearest_prime_number(cur_n):
    # Если число меньше 2, ближайшее простое — это 2
    if cur_n < 2:
        return 2

    # Если текущее число простое, оно же и есть ближайшее
    elif is_prime(cur_n):
        return cur_n

    # Поиск ближайшего простого числа с шагом ±flag
    flag = 0
    while True:
        # Проверяем число меньшее на flag
        if is_prime(cur_n - flag):
            return cur_n - flag
        # Проверяем число большее на flag
        if is_prime(cur_n + flag):
            return cur_n + flag
        # Увеличиваем шаг на единицу
        flag += 1


# Основная программа
try:
    print("---------------------------------------")
    # Ввод натурального числа от пользователя
    natural_number = int(input("Введите натуральное число для поиска ближайшего простого числа: "))

    # Проверяем, является ли число натуральным
    if natural_number < 1:
        raise ValueError("Число должно быть натуральным (больше 0).")

    # Поиск ближайшего простого числа
    nearest = nearest_prime_number(natural_number)

    # Вывод результата
    print("Задание 4-5: Поиск ближайшего простого числа/тест к заданию")
    print(f"Ближайшее простое число к {natural_number} равно {nearest}")
    print("---------------------------------------")
except ValueError as e:
    # Обработка некорректного ввода
    print(f"Ошибка: {e}")


# Тестовая функция для проверки работы алгоритма
def test_nearest_prime_number():
    # Набор тестов: (входное число, ожидаемый результат)
    test_cases = [
        (20, 19),  # Ближайшее простое к 20 — это 19
        (15, 13),  # Ближайшее простое к 15 — это 13
        (29, 29),  # 29 уже простое
        (2, 2),  # 2 — простое число
        (1, 2),  # Ближайшее к 1 — это 2
        (100, 101)  # Ближайшее к 100 — это 101
    ]

    # Проход по каждому тестовому случаю
    for i, (input_num, expected_result) in enumerate(test_cases, 1):
        # Получаем результат функции для текущего теста
        result = nearest_prime_number(input_num)
        # Проверяем результат с ожидаемым
        if result == expected_result:
            print(f"Тест {i} пройден: ближайшее простое к {input_num} = {result}")
        else:
            print(f"Тест {i} НЕ пройден: ожидалось {expected_result}, но получено {result}")


# Запуск тестовой функции
test_nearest_prime_number()

print("---------------------------------------")
