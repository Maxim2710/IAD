# Функция для получения минора матрицы — это подматрица, полученная удалением одной строки и одного столбца
def get_minor(cur_matrix, row, col):
    # Возвращаем подматрицу, исключая указанную строку и столбец
    return [r[:col] + r[col + 1:] for r in (cur_matrix[:row] + cur_matrix[row + 1:])]


# Функция для вычисления определителя квадратной матрицы произвольного размера
def matrix_function(cur_matrix):
    # Проверяем, что аргумент является списком
    if not isinstance(matrix, list):
        raise ValueError("Аргумент должен быть двухуровневым списком.")

    # Получаем размер матрицы (количество строк)
    len_matrix = len(cur_matrix)

    # Проверка на пустую матрицу
    if len_matrix == 0:
        raise ValueError("Матрица не может быть пустой.")

    # Проверяем, что каждая строка в матрице — это список и что матрица квадратная
    for row in cur_matrix:
        if not isinstance(row, list) or len(row) != len_matrix:
            raise ValueError("Матрица должна быть квадратной (одинаковое количество строк и столбцов).")

    # Если матрица 1x1, возвращаем её единственный элемент
    if len_matrix == 1:
        return cur_matrix[0][0]

    # Если матрица 2x2, используем упрощённую формулу для вычисления определителя:
    # det(A) = a*d - b*c
    if len_matrix == 2:
        return cur_matrix[0][0] * cur_matrix[1][1] - cur_matrix[0][1] * cur_matrix[1][0]

    # Рекурсивное вычисление определителя для матриц 3x3 и выше
    opr = 0  # Инициализация переменной для хранения значения определителя
    for col in range(len_matrix):
        # Получаем минор для элемента [0][col] — подматрицу, исключая строку 0 и столбец col
        minor = get_minor(cur_matrix, 0, col)
        # Вычисляем определитель по формуле разложения по первой строке
        opr += ((-1) ** col) * cur_matrix[0][col] * matrix_function(minor)

    return opr  # Возвращаем определитель


# Пример матрицы для вычисления определителя
matrix = [
    [5, 1, 3],
    [1, -7, -1],
    [1, 0, 4]
]

try:
    # Вывод результатов
    print("---------------------------------------")
    print("Задание 12: Определение определителя матрицы произвольной размерности")
    # Вычисляем и выводим определитель матрицы
    print("Определитель матрицы: " + str(matrix_function(matrix)))
    print("---------------------------------------")
except ValueError as e:
    print(e)
